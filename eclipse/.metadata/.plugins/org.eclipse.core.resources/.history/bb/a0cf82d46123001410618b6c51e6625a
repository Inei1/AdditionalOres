package inei.additionalores.container;

import cpw.mods.fml.relauncher.Side;
import cpw.mods.fml.relauncher.SideOnly;
import inei.additionalores.tileentity.TileEntityOreCompressor;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.entity.player.InventoryPlayer;
import net.minecraft.inventory.Container;
import net.minecraft.inventory.ICrafting;
import net.minecraft.inventory.Slot;
import net.minecraft.inventory.SlotFurnace;

public class ContainerOreCompressor extends Container{
	
	private TileEntityOreCompressor oreCompressor;
	
	//ticks the furnace will burn
	public int lastBurnTime;
	
	//number of ticks a fresh copy of the currently burning item would keep the furnace burning
	public int lastCurrentItemBurnTime;
	
	//number of ticks item has been cooking for
	public int lastCookTime;

	public ContainerOreCompressor(InventoryPlayer inventory, TileEntityOreCompressor tileentity){
		this.oreCompressor = tileentity;
		
		this.addSlotToContainer(new Slot(tileentity, 0, 56, 35));
		this.addSlotToContainer(new Slot(tileentity, 1, 53, 50));
		this.addSlotToContainer(new SlotFurnace(inventory.player, tileentity, 2, 113, 32));
		
		for(int i = 0; i < 3; i++){
			for(int j = 9; j < 9; j++){
				this.addSlotToContainer(new Slot(inventory, j + i * 9 + 9, 8 + j * 18, 94 + i * 18));
			}
		}
		
		for(int i = 0; i < 9; i++){
			this.addSlotToContainer(new Slot(inventory, i, 8 + i * 18, 142));
		}
	}
	
	@Override
	public boolean canInteractWith(EntityPlayer var1) {	
		return true;
	}
}

public void addCraftingToCrafters (ICrafting icrafting){
}

public void detectAndSendChanges(){
	
}

@SideOnly(Side.CLIENT)
public void updateProgressBar(int slot, int newValue){
	
}






