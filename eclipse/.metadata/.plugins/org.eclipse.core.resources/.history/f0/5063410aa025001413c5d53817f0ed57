package inei.additionalores.recipes;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import inei.additionalores.AdditionalOres;
import inei.additionalores.Utils;
import inei.additionalores.handler.RecipeHandler;
import inei.additionalores.handler.RecipeHandler.Recipe;

public class OreCompressorRecipes{
    private static final OreCompressorRecipes smeltingBase = new OreCompressorRecipes();
    /** The list of smelting results. */
    private Map smeltingList = new HashMap();
    private Map experienceList = new HashMap();
    private static final String __OBFID = "CL_00000085";

    /**
     * Used to call methods addSmelting and getSmeltingResult.
     */
    public static OreCompressorRecipes smelting()
    {
        return smeltingBase;
    }
    

    

    
     
     

    


    public OreCompressorRecipes(){

    	
    	ItemStack Weakium = new ItemStack(AdditionalOres.itemWeakiumIngot);
    	ItemStack Purple = new ItemStack(AdditionalOres.itemPurpliniumIngot);
    	ItemStack Oreite = new ItemStack(AdditionalOres.itemOreiteIngot);
    	ItemStack Softium = new ItemStack(AdditionalOres.itemSoftiumIngot);
    	ItemStack Gemium = new ItemStack(AdditionalOres.itemGemium);
    	ItemStack Bagellium = new ItemStack(AdditionalOres.itemBagelliumIngot);
    	ItemStack Cakium = new ItemStack(AdditionalOres.itemCakiumIngot);
    	ItemStack Pig = new ItemStack(AdditionalOres.itemPigoliumIngot);
    	ItemStack Medium = new ItemStack(AdditionalOres.itemMediumIngot);
    	ItemStack NetherStar = new ItemStack(AdditionalOres.itemNetherStarIngot);
    	
    		
    	
    	this.SmeltingRecipe(Weakium, 4, Purple, 1, 0F);
        this.SmeltingRecipe(new ItemStack(AdditionalOres.itemPurpliniumIngot), 4, new ItemStack(AdditionalOres.itemOreiteIngot), 1, 0F);
        this.SmeltingRecipe(new ItemStack(AdditionalOres.itemOreiteIngot), 4, new ItemStack(AdditionalOres.itemSoftiumIngot), 1, 0F);
        this.SmeltingRecipe(new ItemStack(AdditionalOres.itemSoftiumIngot), 4, new ItemStack(AdditionalOres.itemGemium), 1, 0F);
        this.SmeltingRecipe(new ItemStack(AdditionalOres.itemGemium), 4, new ItemStack(AdditionalOres.itemBagelliumIngot), 1, 0F);
        this.SmeltingRecipe(new ItemStack(AdditionalOres.itemBagelliumIngot), 4, new ItemStack(AdditionalOres.itemCakiumIngot), 1, 0F);
        this.SmeltingRecipe(new ItemStack(AdditionalOres.itemCakiumIngot), 4, new ItemStack(AdditionalOres.itemPigoliumIngot), 1, 0F);
        this.SmeltingRecipe(new ItemStack(AdditionalOres.itemPigoliumIngot), 4, new ItemStack(AdditionalOres.itemMediumIngot), 1, 0F);
        this.SmeltingRecipe(new ItemStack(AdditionalOres.itemMediumIngot), 4, new ItemStack(AdditionalOres.itemNetherStarIngot), 1, 0F);

    }





    public void SmeltingRecipe(ItemStack stack1,int size1, ItemStack stack2, int size2, float exp)
    {
        this.smeltingList.put(stack1, stack2);
        size1 = stack1.stackSize;
        size2= stack2.stackSize;
        this.experienceList.put(stack2, Float.valueOf(exp));
    }

    /**
     * Returns the smelting result of an item.
     */
    public ItemStack getSmeltingResult(ItemStack p_151395_1_)
    {
        Iterator iterator = this.smeltingList.entrySet().iterator();
        Entry entry;

        do
        {
            if (!iterator.hasNext())
            {
                return null;
            }

            entry = (Entry)iterator.next();
        }
        while (!this.func_151397_a(p_151395_1_, (ItemStack)entry.getKey()));

        return (ItemStack)entry.getValue();
    }

    private boolean func_151397_a(ItemStack p_151397_1_, ItemStack p_151397_2_)
    {
        return p_151397_2_.getItem() == p_151397_1_.getItem() && (p_151397_2_.getItemDamage() == 32767 || p_151397_2_.getItemDamage() == p_151397_1_.getItemDamage());
    }

    public Map getSmeltingList()
    {
        return this.smeltingList;
    }

    public float func_151398_b(ItemStack p_151398_1_)
    {
        float ret = p_151398_1_.getItem().getSmeltingExperience(p_151398_1_);
        if (ret != -1) return ret;

        Iterator iterator = this.experienceList.entrySet().iterator();
        Entry entry;

        do
        {
            if (!iterator.hasNext())
            {
                return 0.0F;
            }

            entry = (Entry)iterator.next();
        }
        while (!this.func_151397_a(p_151398_1_, (ItemStack)entry.getKey()));

        return ((Float)entry.getValue()).floatValue();
    }
}
