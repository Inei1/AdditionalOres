package inei.additionalores.recipes;

import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;
import java.util.Map.Entry;

import net.minecraft.block.Block;
import net.minecraft.item.Item;
import net.minecraft.item.ItemStack;
import inei.additionalores.AdditionalOres;
import inei.additionalores.Utils;

public class OreCompressorRecipes extends Utils
{
    private static final OreCompressorRecipes smeltingBase = new OreCompressorRecipes();
    /** The list of smelting results. */
    private Map smeltingList = new HashMap();
    private Map experienceList = new HashMap();
    private static final String __OBFID = "CL_00000085";

    /**
     * Used to call methods addSmelting and getSmeltingResult.
     */
    public static OreCompressorRecipes smelting()
    {
        return smeltingBase;
    }
    
    public static int getSize(ItemStack stack) 
     	{ 
     		return stack != null ? stack.stackSize : 0; 
     	} 
    
	public static ItemStack size(ItemStack stack, int size) 
 	{ 
 		if(size <= 0 || stack == null) 
 		{ 
 			return null; 
 		} 
 
 
 		ItemStack ret = stack.copy(); 
 		ret.stackSize = size; 
 		return ret; 
 	} 


    
    public static ItemStack subtract(ItemStack stack1, ItemStack stack2) 
     	{ 
     		if(stack1 == null) 
     		{ 
     			return null; 
     		} 
     		else if(stack2 == null) 
     		{ 
     			return stack1; 
     		} 
    
    
    		return size(stack1, getSize(stack1)-getSize(stack2)); 
     	} 
     
     

    

    private boolean CanProcess(ItemStack stack, int stacksize){
    	stack.stackSize = stacksize;
    	if(stacksize >= 4){
    		return true;
    	}else{
    		return false;
    	}
    }

    private OreCompressorRecipes(){
    	
    	ItemStack Weakium = new ItemStack(AdditionalOres.itemWeakiumIngot);
    	ItemStack Purple = new ItemStack(AdditionalOres.itemPurpliniumIngot);
    	ItemStack Oreite = new ItemStack(AdditionalOres.itemOreiteIngot);
    	ItemStack Softium = new ItemStack(AdditionalOres.itemSoftiumIngot);
    	ItemStack Gemium = new ItemStack(AdditionalOres.itemGemium);
    	ItemStack Bagellium = new ItemStack(AdditionalOres.itemBagelliumIngot);
    	ItemStack Cakium = new ItemStack(AdditionalOres.itemCakiumIngot);
    	ItemStack Pig = new ItemStack(AdditionalOres.itemPigoliumIngot);
    	ItemStack Medium = new ItemStack(AdditionalOres.itemMediumIngot);
    	ItemStack NetherStar = new ItemStack(AdditionalOres.itemNetherStarIngot);
    		
    	if(OreCompressorProcess(Weakium, 4)){
        this.func_151394_a(Weakium, new ItemStack(AdditionalOres.itemPurpliniumIngot), 0F);	
        }
        this.func_151394_a(new ItemStack(AdditionalOres.itemPurpliniumIngot), new ItemStack(AdditionalOres.itemOreiteIngot), 0F);
        this.func_151394_a(new ItemStack(AdditionalOres.itemOreiteIngot), new ItemStack(AdditionalOres.itemSoftiumIngot), 0F);
        this.func_151394_a(new ItemStack(AdditionalOres.itemSoftiumIngot), new ItemStack(AdditionalOres.itemGemium), 0F);
        this.func_151394_a(new ItemStack(AdditionalOres.itemGemium), new ItemStack(AdditionalOres.itemBagelliumIngot), 0F);
        this.func_151394_a(new ItemStack(AdditionalOres.itemBagelliumIngot), new ItemStack(AdditionalOres.itemCakiumIngot), 0F);
        this.func_151394_a(new ItemStack(AdditionalOres.itemCakiumIngot), new ItemStack(AdditionalOres.itemPigoliumIngot), 0F);
        this.func_151394_a(new ItemStack(AdditionalOres.itemPigoliumIngot), new ItemStack(AdditionalOres.itemMediumIngot), 0F);
        this.func_151394_a(new ItemStack(AdditionalOres.itemMediumIngot), new ItemStack(AdditionalOres.itemNetherStarIngot), 0F);

    }



	public void func_151393_a(Block p_151393_1_, ItemStack p_151393_2_, float p_151393_3_)
    {
        this.func_151396_a(Item.getItemFromBlock(p_151393_1_), p_151393_2_, p_151393_3_);
    }

    public void func_151396_a(Item p_151396_1_, ItemStack p_151396_2_, float p_151396_3_)
    {
        this.func_151394_a(new ItemStack(p_151396_1_, 1, 32767), p_151396_2_, p_151396_3_);
    }

    public void func_151394_a(ItemStack p_151394_1_, ItemStack p_151394_2_, float p_151394_3_)
    {
        this.smeltingList.put(p_151394_1_, p_151394_2_);
        this.experienceList.put(p_151394_2_, Float.valueOf(p_151394_3_));
    }

    /**
     * Returns the smelting result of an item.
     */
    public ItemStack getSmeltingResult(ItemStack p_151395_1_)
    {
        Iterator iterator = this.smeltingList.entrySet().iterator();
        Entry entry;

        do
        {
            if (!iterator.hasNext())
            {
                return null;
            }

            entry = (Entry)iterator.next();
        }
        while (!this.func_151397_a(p_151395_1_, (ItemStack)entry.getKey()));

        return (ItemStack)entry.getValue();
    }

    private boolean func_151397_a(ItemStack p_151397_1_, ItemStack p_151397_2_)
    {
        return p_151397_2_.getItem() == p_151397_1_.getItem() && (p_151397_2_.getItemDamage() == 32767 || p_151397_2_.getItemDamage() == p_151397_1_.getItemDamage());
    }

    public Map getSmeltingList()
    {
        return this.smeltingList;
    }

    public float func_151398_b(ItemStack p_151398_1_)
    {
        float ret = p_151398_1_.getItem().getSmeltingExperience(p_151398_1_);
        if (ret != -1) return ret;

        Iterator iterator = this.experienceList.entrySet().iterator();
        Entry entry;

        do
        {
            if (!iterator.hasNext())
            {
                return 0.0F;
            }

            entry = (Entry)iterator.next();
        }
        while (!this.func_151397_a(p_151398_1_, (ItemStack)entry.getKey()));

        return ((Float)entry.getValue()).floatValue();
    }
}
